meta {
  name: Get logged in user
  type: http
  seq: 11
}

get {
  url: {{mockagram_api_url}}/users/me
  body: none
  auth: none
}

headers {
  Cookie: {{mockagram_access_token}}
}

tests {
  test("should return user data when authenticated", function() {
    // Check response status
    bru.assert(res.status === 200 || res.status === 401, 
      'Response status should be 200 when authenticated or 401 when not authenticated');
    
    if (res.status === 200) {
      const body = res.getBody();
      
      // Verify user object structure
      bru.assert(body._id != null, 'Response should include user ID');
      bru.assert(body.username != null, 'Response should include username');
      bru.assert(body.email != null, 'Response should include email');
      bru.assert(body.password == null, 'Response should not include password');
    }
  });
}

docs {
  # Get Logged In User
  
  This endpoint returns the details of the currently authenticated user.
  Requires a valid JWT token in the mgAccessToken cookie.

  ## Authentication
  - Requires valid mgAccessToken cookie
  - Cookie is set automatically after successful login

  ## Response
  ### Success (200)
  Returns user object:
  ```json
  {
    "_id": "user_id",
    "username": "example_user",
    "email": "user@example.com"
  }
  ```

  ### Error (401)
  When not authenticated or token is invalid:
  ```json
  {
    "error": "Not authenticated"
  }
  ```
  or
  ```json
  {
    "error": "Invalid or expired token"
  }
  ```

  ### Error (404)
  When user not found:
  ```json
  {
    "error": "User not found"
  }
  ```

  Note: If token is invalid, the endpoint will also clear the invalid cookie.
} 
